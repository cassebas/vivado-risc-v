changecom(%)dnl
% This is an autogenerated tex file, do NOT edit!
% It is generated by the use of m4 macros.
%
% This m4 macro file expects the following 4 parameters:
%  -Dbenchmark: the name of the benchmark of which cycles must be plotted
%  -Dcachesize: the size of the instruction cache (text, like e.g. 128b)
%  -Dexp_nr:    the number of the experiment:
%     - 1 -> instruction cache fixed, variable data cache
%     - 2 -> data cache fixed, variable instruction cache
%     - 3 -> both instruction and data cache variable
dnl
divert(`-1')
% Define forloop for iteration within m4
% forloop(var, from, to, stmt) - simple version, taken from GNU manual
define(`forloop', `pushdef(`$1', `$2')_forloop($@)popdef(`$1')')
define(`_forloop',
`$4`'ifelse($1, `$3', `', `define(`$1', incr($1))$0($@)')')
dnl
define(escape_adpcm_dec,      adpcm\_dec)dnl
define(escape_adpcm_enc,      adpcm\_enc)dnl
define(escape_ammunition,     ammunition)dnl
define(escape_anagram,        anagram)dnl
define(escape_audiobeam,      audiobeam)dnl
define(escape_cjpeg_transupp, cjpeg\_transupp)dnl
define(escape_cjpeg_wrbmp,    cjpeg\_wrbmp)dnl
define(escape_dijkstra,       dijkstra)dnl
define(escape_epic,           epic)dnl
define(escape_fmref,          fmref)dnl
define(escape_g723_enc,       g723\_enc)dnl
define(escape_gsm_dec,        gsm\_dec)dnl
define(escape_gsm_enc,        gsm\_enc)dnl
define(escape_h264_dec,       h264\_dec)dnl
define(escape_huff_dec,       huff\_dec)dnl
define(escape_huff_enc,       huff\_enc)dnl
define(escape_mpeg2,          mpeg2)dnl
define(escape_ndes,           ndes)dnl
define(escape_petrinet,       petrinet)dnl
define(escape_rijndael_dec,   rijndael\_dec)dnl
define(escape_rijndael_enc,   rijndael\_enc)dnl
define(escape_statemate,      statemate)dnl
define(escape_susan,          susan)dnl
dnl
define(escape_benchmark_name, `escape_$1')dnl
dnl cache sizes
define(cachesize2text_1, 128b)dnl
define(cachesize2text_2, 256b)dnl
define(cachesize2text_3, 512b)dnl
define(cachesize2text_4, 1k)dnl
define(cachesize2text_5, 2k)dnl
define(cachesize2text_6, 4k)dnl
define(cachesize2text_7, 8k)dnl
define(cachesize2text_8, 16k)dnl
define(cachesize2text_9, 32k)dnl
define(cachesize2text_10, 64k)dnl
dnl
define(lookup_cachesize, `cachesize2text_$1')dnl
dnl
dnl
dnl Convert the experiment number to the fixed or variable letter
dnl denoting the instruction cache (i) or data cache (d)
dnl   experiment 1 uses a fixed instruction cache with variable data caches
dnl   experiment 2 uses a fixed data cache with variable instruction caches
dnl Note: the i must be double quoted since it's also a for-loop index!
define(fixed_cache_letter_1, ``i'')dnl
define(fixed_cache_letter_2, d)dnl
define(variable_cache_letter_1, d)dnl
define(variable_cache_letter_2, ``i'')dnl
dnl
define(lookup_fixed_cache, `fixed_cache_letter_$1')dnl
define(lookup_variable_cache, `variable_cache_letter_$1')dnl
dnl
dnl
dnl Definition of macro_loop
dnl
dnl This macro will run a for loop from the first argument
dnl to the second argument. In each iteration the third argument
dnl is called as a macro, with the index of the for loop as
dnl the macro's argument.
define(macro_loop, `forloop(`i', `$1', `$2', `$3(i)')')dnl
dnl
dnl
dnl Definition of macro_special_loop
dnl
dnl This macro will run a for loop from the first argument
dnl to the second argument. In each iteration the third argument
dnl is called as a macro, with two arguments:
dnl   1) the second argument to macro_special_loop
dnl   2) the iteration number i from the for loop.
define(macro_special_loop, `forloop(`i', `$1', `$2', `$3($4(i),i)')')
dnl
dnl
dnl % template_title
define(template_title, `title={\texttt{escape_benchmark_name(benchmark)} (lookup_fixed_cache(exp_nr)-cache lookup_cachesize(1)---lookup_cachesize(10))},')dnl
dnl
dnl
dnl % template_xlabel
define(template_xlabel, `lookup_variable_cache(exp_nr)-cache size')dnl
dnl
dnl % template_addplot
dnl %   parameters:
dnl %     $1 cache size index (from 1-10)
define(template_addplot, `
      \addplot+[]
      table [
        x expr = \coordindex,
        y expr = \thisrow{cycles_cold_cache},
      ] {data/rv32-experiment-benchmark-`'exp_nr`'-`'lookup_fixed_cache(exp_nr)`'lookup_cachesize($1)`'.csv};
      \addlegendentry{{\scriptsize lookup_fixed_cache(exp_nr)-cache lookup_cachesize($1)}}
')
dnl
dnl % template_figure
dnl %   parameters:
dnl %     $1 data cache size (in text)
define(template_figure, `dnl
\begin{figure}
  \centering
  \begin{tikzpicture}
    \begin{axis}
      [
        template_title(cachesize)
        table/col sep=comma,
        xlabel={template_xlabel},
        ylabel={number of cycles},
        flexible xticklabels from table={data/rv32-experiment-benchmark-exp_nr-lookup_fixed_cache(exp_nr)`'$1`'.csv}{lookup_variable_cache(exp_nr)`'cache_size}{col sep=comma},
        xtick=data,
        x tick label style={rotate=45, anchor=north east, inner sep=0mm},
        enlarge x limits=0.1,
        legend style={at={(1.48,0.33)},anchor=south east},
      ]
dnl Call the macro_loop for generating addplot templates,
dnl for each instruction cache size one template addplot is generated.
dnl Each call to template_addplot will take the index of the for loop
dnl as an argument, which will serve as an index to loopup the name
dnl of the corresponding cache size.
macro_loop(1, 10, `template_addplot')dnl
    \end{axis}
  \end{tikzpicture}
  \caption{Benchmarks running on $2 cores configuration config `label' label}
  \`label'{benchmark_`'lookup_fixed_cache(exp_nr)`'cache_`'cachesize`'_configs}
\end{figure}')dnl
divert(0)dnl
dnl
dnl
template_figure(cachesize)
